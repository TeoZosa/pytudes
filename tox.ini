[gh-actions]
python =
    3.9: py39, coverage

[tox]
skip_missing_interpreters = true
isolated_build = true
envlist =
    py3{9},
    coverage,
    package

[testenv]
description = Run test suite under {basepython}
setenv =
    PIP_DISABLE_VERSION_CHECK = 1
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
    PY_COLORS = 1
deps = -r requirements-dev.txt
passenv =
    http_proxy
    https_proxy
    no_proxy
commands = pytest \
           --cov={toxinidir}/pytudes \
           --cov-config={toxinidir}/pyproject.toml \
           --junitxml={toxworkdir}/junit.{envname}.xml \
           --basetemp={envtmpdir} \
           -n={env:PYTEST_XDIST_PROC_NR:auto} \
           {posargs:pytudes}
parallel_show_output = True

[testenv:coverage]
description = [Run locally after tests]: Combine coverage data and create reports;
              generates a diff coverage against `{env:DIFF_AGAINST:origin/master}`
              (can be changed by setting `DIFF_AGAINST` env var)
deps =
    coverage[toml]
    diff_cover
skip_install = true
passenv =
    {[testenv]passenv}
    DIFF_AGAINST
setenv = COVERAGE_FILE={toxworkdir}/.coverage
commands =
    coverage combine {toxworkdir}
    coverage report
    coverage xml -o {toxworkdir}/coverage.xml
    coverage html -d {toxworkdir}/htmlcov
    coverage json -o {toxworkdir}/coverage.json --pretty-print
    diff-cover {toxworkdir}/coverage.xml \
        --compare-branch={env:DIFF_AGAINST:origin/master} \
        --diff-range-notation '..'
depends =
    py3{9}
parallel_show_output = {[testenv]parallel_show_output}

[testenv:precommit]
description = Run `pre-commit` hooks to auto-format and lint the codebase
deps =
    pre-commit
    # Pre-commit hooks that rely on finding their executables in the `.tox/precommit/bin`
    mypy
    pylint
    # Dependencies that are imported in source code and therefore needed for above pre-commit hook execution
    emoji
    pytest
    sphinx
    # PEP 561 compliant stub packages for mypy
    types-emoji
    # Prod dependencies
    -r requirements.txt
skip_install = true
; For shfmt
setenv = GOCACHE={envdir}/go-build
passenv =
    HOMEPATH  # needed on Windows
    PROGRAMDATA  # needed on Windows
    SKIP # hook ids to skip
    TERM # (e.g. for mypy color output (https://github.com/tox-dev/tox/issues/1441#issuecomment-548063521))
commands = pre-commit run {posargs} -vv --all-files --color always
           python -c 'print("hint: run `make install-pre-commit-hooks` to add checks as pre-commit hook")'

[testenv:package]
description = Build Python package and validate its long description
deps =
    poetry >= 1.1.2
    twine >= 1.12.1
    readme-renderer[md] >= 24.0
skip_install = true
commands = poetry build
           twine check {toxinidir}/dist/*

[testenv:security]
skip_install = true
deps = safety
commands = safety check --full-report -r {toxinidir}/requirements-all.txt

;Tooling configs
[mypy]
ignore_missing_imports = True
pretty = True
show_column_numbers = True
show_error_context = True
show_error_codes = True
