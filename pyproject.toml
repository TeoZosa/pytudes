[tool.poetry]
name = "pytudes"
version = "0.1.0"
description = "Pytudes"
authors = ["Teo Zosa <teo@sonosim.com>"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/TeoZosa/pytudes"
homepage = "https://github.com/TeoZosa/pytudes"
include = ["pytudes/py.typed"]
keywords = []
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
]

[tool.poetry.urls]
Changelog = "https://github.com/TeoZosa/pytudes/releases"

[tool.poetry.dependencies]
python = "^3.10,<3.11"

# Project-specific
coolname = "^1.1.0"
jupyter = "^1.0.0"
pandas = "^1.5.0"
pydantic = "^1.10"
scikit-learn = "^1.1.2"
scipy = "^1.9.1"

# Documentation
emoji = { version = "^1.7.0", optional = true}
importlib-metadata = { version = "^4.12.0", optional = true}
myst-parser = { version = "^0.18.1", optional = true}
pygments = { version = "^2.13.0", optional = true}
python-dotenv = { version = "^0.21.0", optional = true}
sphinx = { version = "^5.3.0", optional = true}
sphinx-autoapi = { version = "^1.9.0", optional = true}
sphinx-rtd-theme = { version = "^1.0.0", optional = true}
sphinxcontrib-confluencebuilder = { version = "^1.9.0", optional = true}
types-emoji = { version = "^2.1.0", optional = true} # PEP 561 compliant stub package for mypy

[tool.poetry.dev-dependencies]
# Standardized Developer Workflow Orchestration
cruft = "^2.11.1" # Automated Cookiecutter template synchronization

# Type Checking and Data Validation
mypy = "^0.990" # Static type checker

# Testing
pytest = "^7.1.3"
pytest-cov = "^3.0.0"
pytest-emoji = "^0.2.0"
pytest-mock = "^3.8.2"
pytest-sugar = "^0.9.5"
pytest-xdist = "^2.5.0"
xdoctest = {extras = ["all"], version = "^1.1.0"}
tox = "^3.26.0"
tox-wheel = "^0.7.0"

# Linting
## Code formatting
black = "^22.8" # see: https://black.readthedocs.io/en/stable/editor_integration.html
## Code quality
pylint = "^2.15.3"
## Automation and management
pre-commit = "^2.20.0"

# CI/CD
tox-gh-actions = "^2.10.0"

# Documentation
darglint = "^1.8.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
emoji = "^1.7.0"
importlib-metadata = "^4.12.0"
myst-parser = "^0.18.1"
pygments = "^2.13.0"
python-dotenv = "^0.21.0"
sphinx = "^5.3.0"
sphinx-autoapi = "^1.9.0"
sphinx-rtd-theme = "^1.0.0"
sphinxcontrib-confluencebuilder = "^1.9.0"
types-emoji = "^2.1.0" # PEP 561 compliant stub package for mypy
#################################################################################
# Tooling configs                                                               #
#################################################################################
[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
omit =[
    # Private (unversioned) files
    "pytudes/_2021/private/*",
]
parallel = true
source = ["pytudes"]

[tool.coverage.report]
exclude_lines =[
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
fail_under = 100
show_missing = true
skip_covered = true

[tool.flakeheaven]
# specify any flake8 options
exclude = [".*"] # Ignore dotfiles
# make output nice
format = "grouped"
# show line of source code in output
show_source = true

# list of plugins and rules for them
[tool.flakeheaven.plugins]
# cyclomatic complexity (https://github.com/PyCQA/mccabe)
mccabe = ["+*"]
# include everything in pyflakes except F401
pyflakes = ["+*", "-F401"]
# include everything in pycodestyle except what Black covers
pycodestyle = ["+*",
    "-E203", # Whitespace before ":"
    "-E501", # Line too long (82 > 78 characters)
    "-W503",  # Line break occurred before a binary operator <- this is now considered best practice by PEP 8

    # Break convention for coding problems
    #   given that their purpose and characteristics
    #   distinguish them from typical software engineering programs
    #   (e.g., generally independent modules)
    "-E266", # Too many leading '#' (e.g., salient sub-section headers idiosyncratic to this project)
    "-E731", # Lambda expression assignment; simplifies code formatting for trivial functions/implicitly documents through naming
    "-E402", # Module level import not at top of file; for a given problem in a module, that module may contain different algorithms, with dependent libraries imported prior to the definition of those algorithms
]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
fail-under = 0 # adjust `fail-under` value as quality standards permit
whitelist-regex = []
color = true

[tool.isort]
profile = "black"
atomic = true
combine_as_imports = true

[tool.mypy]
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

[tool.pylint.messages_control]
disable = [
  # Explicitly document only as needed
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  # Black & Flake8 purview
  "line-too-long",
  "c-extension-no-member",
  # Break convention for coding problems
  #   given that their purpose and characteristics
  #   distinguish them from typical software engineering programs
  #   (e.g., generally independent modules)
  "duplicate-code",
  "invalid-name",
  "no-else-return",
  "pointless-string-statement",
  "too-few-public-methods",
  "unnecessary-lambda-assignment",
  "unnecessary-pass",
  "unused-import", # some imports are used in doctests which pylint does not register as usages
  "useless-else-on-loop",
  "wrong-import-order",
  "wrong-import-position",
]

[tool.pylint.similarities]
# Ignore imports when computing similarities.
ignore-imports = "yes"

[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict-markers", "-vv", "--emoji", "--xdoctest"]
xfail_strict = true
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
